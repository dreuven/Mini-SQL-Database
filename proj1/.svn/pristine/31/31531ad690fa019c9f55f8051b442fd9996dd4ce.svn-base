package db61b;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import static db61b.Utils.*;
/** Basic Testing: 
 *  Tests basic functionality:
 *  @Doron Reuven
 */


public class BasicTests{
	/** Tests the row size method in Row file. */
	@Test
	public void testRowSize(){
		Row a = new Row(new String[]{});
		Row r = new Row(new String[]{"Josh", "is", "writing", "this", "test."});
		assertEquals(5, r.size());
		assertEquals(0, a.size());
	}
	//* Checking to see if the row you're adding is the same size your table requires */
	// @Test(expected = Error.class)
	// public void testAddingRow(){
	// 	String[] columntitles = new String[1];
	// 	columntitles[0] = "Name";
	// 	Table a = new Table(columntitles);
	// 	String[] rowEntries = new String[2];
	// 	rowEntries[0] = "jake";
	// 	rowEntries[1] = "HouseofCards";
	// 	Row row = new Row(rowEntries);
	// 	a.add(row);
	// }

	//* Checking to make sure the get method doesnt go out of bounds */
	@Test(expected = IndexOutOfBoundsException.class)
	public void testExceptionofRow(){
		Row r = new Row(new String[]{"Josh", "is", "writing", "this", "test."});
		r.get(-300);
		r.get(30000);
	}

	//* Making sure the Row.equals() method works */
	@Test
	public void testRowEqualsMethod(){
		Row a = new Row(new String[]{});
		Row b = new Row(new String[]{});
		Row c = new Row(new String[] {"all","day","long"});
		Row d = new Row(new String[] {"all","day","long"});
		Row e = new Row(new String[] {"same","as","above"});
		assertEquals(true, a.equals(b));
		assertEquals(false, c.equals(a));
		assertEquals(true, c.equals(d));
		assertEquals(false, e.equals(d));
	}

	//* Testing the get method in Row */
	@Test
	public void testOfGetFromRow(){
		Row c = new Row(new String[] {"all","day","long"});
		assertEquals("all", c.get(0));
		assertEquals("long", c.get(2));

	}

	//* Testing that columns() in Table.java works */
	@Test
	public void testSizeofColumnsfromTable(){
		Table t = new Table(new String[]{"Person", "Grade", "Interest"});
		Table m = new Table(new String[]{});
		assertEquals(3, t.columns());
		assertEquals(0, m.columns());
	}

	//* Testing getTitle() method of Table.java */
	@Test
	public void testGetTitleofTable(){
		Table t = new Table(new String[]{"Person", "Grade", "Interest"});
		Table m = new Table(new String[]{"Personal", "Gradepointavg", "Interesting llamas"});
		assertEquals("Grade", t.getTitle(1));
		assertEquals("Interest", t.getTitle(2));
		assertEquals("Personal", m.getTitle(0));

	}
	//* Testing the put and get methods in Database */
	@Test
	public void testDatabasePutandGetMethod(){
		Database data = new Database();
		Table t = new Table(new String[]{"Person", "Grade", "Interest"});
		Table m = new Table(new String[]{"Personal", "Gradepointavg", "Interesting llamas"});
		data.put("Boring", t);
		data.put("SecondTable", m);
		assertEquals(t,data.get("Boring"));
		assertEquals(m, data.get("SecondTable"));
		assertEquals(null, data.get("Never gonna find me slim"));
	}

	//* Testing findColumn() method in Table */
	@Test
	public void testfindColumnfromTable(){
		Table t = new Table(new String[]{"Person", "Grade", "Interest"});
		Table m = new Table(new String[]{"Personal", "Gradepointavg", "Interesting llamas"});
		assertEquals(0, t.findColumn("Person"));
		assertEquals(1, t.findColumn("Grade"));
		assertEquals(2, m.findColumn("Interesting llamas"));
		assertEquals(-1, t.findColumn("Never gonna find me"));
	}
	//* Test for adding a validly sized row and that no duplicates can be added */
	@Test
	public void testForAddingRowToATable(){
		String[] columntitles = new String[3];
		columntitles[0] = "Names";
		columntitles[1] = "Games";
		columntitles[2] = "EveryoneNamedJames";
		Table m = new Table(columntitles);
		Row a = new Row(new String[] {"all","day","long"});
		Row b = new Row(new String[] {"almost","there","yo"});
		assertTrue(m.add(a));
		assertTrue(m.add(b));
		assertEquals(false, m.add(a));
	}
	//* Tests for writeTable and readTable. These two test together nicely. */
	@Test
	public void readWritePrint(){
		Table table = Table.readTable("testing/students");
		table.writeTable("testOfStudents");
		Table testTable = Table.readTable("testOfStudents");
		Iterator<Row> iterTable = table.iterator();
		Iterator<Row> iterTestTable = testTable.iterator();
		while (iterTable.hasNext()){
			Row row1 = iterTable.next();
			Row row2 = iterTestTable.next();
			assertTrue(row1.equals(row2));
		}
	}

	// @Test
	// public void testRowConstructor(){
	// 	ArrayList<Column> = new ArrayList<Column>();
	// 	String[] columntitlesTabOne = String[2];
	// 	columntitlesTabOne[0] = "Name";
	// 	columntitlesTabOne[1] = "Age";
	// 	String[] columntitlesTabTwo = String[3];
	// 	columntitlesTabTwo[0] = "Name";
	// 	columntitlesTabTwo[1] = "Size";
	// 	columntitlesTabTwo[2] = "FavFood";			
	// 	Table table1 = new Table(columntitlesTabOne);
	// 	Table table2 = new Table(columntitlesTabTwo);
	// 	Column a = new Column("Age", table1, table2);
	// 	COlum
	// }
	@Test
	public void testSingleSelectWithConditions(){
		Table old = new Table(new String[]{"Words","Phrases", "Sentences"});
		Row b1 = new Row(new String[] {"all","day","longer"});
		Row b2 = new Row(new String[] {"almost","there","yo"});
		old.add(b1);
		old.add(b2);

		Table newtable = new Table(new String[]{"Words","Phrases"});
		Row a1 = new Row(new String[] {"all","day"});
		Row a2 = new Row(new String[] {"almost","there"});
		newtable.add(a1);
		newtable.add(a2);

		ArrayList<String> titlesofinterest = new ArrayList<String>();
		titlesofinterest.add("Words");
		titlesofinterest.add("Phrases");

		Table m = old.select(titlesofinterest, null);
		Iterator<Row> iter1 = m.iterator();
		Iterator<Row> iter2 = newtable.iterator();

		//Testing that select with no conditions works!
		while(iter1.hasNext()){
			Row rowofm = iter1.next();
			Row rowofnewtable = iter2.next();
			assertTrue(rowofm.equals(rowofnewtable));
		}
		//Beginning tests with Conditions added.

		ArrayList<Condition> conditions = new ArrayList<Condition>(); 
		Column col1 = new Column("Words", old);
		Condition cond1 = new Condition(col1, "=" , "almost");
		conditions.add(cond1);
		Column col2 = new Column("Sentences", old);
		Condition cond2 = new Condition(col2, "!=", "longer");
		conditions.add(cond2);

		Table conditionedTable = old.select(titlesofinterest, conditions);

		Table checkingCondsWorkTable = new Table(titlesofinterest);
		String[] rowEntriesAfterCond = new String[2];
		rowEntriesAfterCond[0] = "almost";
		rowEntriesAfterCond[1] = "there";
		Row rowAfterCondsApplied = new Row(rowEntriesAfterCond);
		checkingCondsWorkTable.add(rowAfterCondsApplied);
		Iterator<Row> iterCondTable = conditionedTable.iterator();
		Iterator<Row> iterCheckTable = checkingCondsWorkTable.iterator();
		while(iterCondTable.hasNext()){
			Row row1 = iterCondTable.next();
			System.out.println(row1.toString());
			Row row2 = iterCheckTable.next();
			System.out.println(row2.toString());
			assertTrue(row1.equals(row2));
		}
	}
	@Test
	public void testTwoTablesWithoutConditions(){
		Table a = Table.readTable("testing/students");
		Table b = Table.readTable("testing/enrolled");
		ArrayList<String> columnNames = new ArrayList<String>();
		ArrayList<Condition> conditions = new ArrayList<Condition>();
		columnNames.add("CCN");
		columnNames.add("Major");

		Table c = a.select(b, columnNames, conditions);

		System.out.println("PRINTING FINAL RESULT");

		c.print();

	}



	public static void main(String[] args){
		System.exit(ucb.junit.textui.runClasses(BasicTests.class));

	}
}